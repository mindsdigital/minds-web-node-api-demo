<!DOCTYPE html>
<html lang="pt-br">

<head> 
    <%- include('partials/head.ejs') %>
    <title>Faça seu Login no Minds Bank</title>
</head>

<body>
    <header>
        <%- include('partials/header.ejs') %>
    </header>
    <main>
        <article>
            <img id="logoRobo" src="/images/robo.jpeg" alt="Robo usando autenticação de voz" />
        </article>
        <aside>
            <div id="loginFormWrapper">
                <form id="loginForm">
                    <div>
                        <label for="username">Username:</label>
                        <input type="text" id="username" name="username" autocomplete="false" required />
                    </div>
                    <div id="recordButtonWrapper">
                        <span for="timeStamp" id="timeStamp" hidden>Time: 00:00:00</span>
                        <button type="button" id="startRecording">Login</button>
                        <button type="button" id="stopRecording" hidden>Enviar</button>
                        <label id="instructions-login">Grave pelo menos 4 segundos para realizar sua
                            autenticação.</label>
                    </div>
                    <div>
                        <button id="submit" type="submit" hidden>Login</button>
                    </div>
                    <div id="logsWrapper">
                        <span>Exibir Logs: </span>
                        <label class="switch" for="ckbLogs">
                            <input type="checkbox" id="ckbLogs" />
                            <div class="slider round"></div>
                        </label>
                    </div>
                    <div>
                        <textarea id="logs" name="logs" rows="10" cols="120" hidden>LOGS:</textarea>
                    </div>
                    <div>
                        <audio id="audioPlayer" controls>
                            Your browser does not support the audio element.
                        </audio>
                    </div>
                </form>
            </div>
        </aside>

    </main>
    <footer>
        <p>Informações de Contato</p>
    </footer>
    <script>
        const RECORDING_LIMIT = 15; // do not exceed 30 seconds.
        let mediaRecorder;
        let audioChunks = [];
        let seconds = 0;
        let intervalId;
        let isRecording = false;

        var usernameInput = document.getElementById("username");
        var audioPlayer = document.getElementById("audioPlayer");
        var startRecordingButton = document.getElementById("startRecording");
        var stopRecordingButton = document.getElementById("stopRecording");
        var checkboxLogs = document.getElementById("ckbLogs");
        var timestamp = document.getElementById("timeStamp");
        var loginButton = document.getElementById("submit");
        var logs = document.getElementById("logs");

        startRecordingButton.addEventListener("click", startRecording);
        stopRecordingButton.addEventListener("click", stopRecording);
        checkboxLogs.addEventListener("change", toggleLogs);
        let logContent = logs.innerText;
        stopRecordingButton.hidden = true;
        audioPlayer.hidden = true;
        timestamp.hidden = true;

        async function startRecording() {
            const usernameValue = username.value.trim();

            if (usernameValue.length === 0) {
                return alert("Por favor, preencha o campo username!");
            }

            const userData = await checkUsernameExists(usernameValue);

            if (!userData) {
                return alert("O username não possui biometria cadastrada");
            }

            logInBrowser(`User Data: ${JSON.stringify(userData)}`);

            try {
                const stream = await navigator.mediaDevices.getUserMedia({
                    audio: true,
                });

                timestamp.hidden = false;
                audioPlayer.hidden = false;

                mediaRecorder = new MediaRecorder(stream);

                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        audioChunks.push(event.data);
                    }
                };

                startTimer();
                logInBrowser(`Started recording at ${new Date()}`);

                mediaRecorder.onstop = () => {
                    const audioBlob = new Blob(audioChunks, { type: "audio/ogg" });
                    const audioUrl = URL.createObjectURL(audioBlob);

                    audioPlayer.src = audioUrl;
                    stopRecordingButton.disabled = true;
                    isRecording = false;
                    logInBrowser(`Stopped recording at ${new Date()}`);
                    proceedWithAuthentication();
                    resetRecording();
                };

                mediaRecorder.start();
                startRecordingButton.hidden = true;
                stopRecordingButton.hidden = true;
                stopRecordingButton.disabled = false;
                isRecording = true;

            } catch (error) {
                logInBrowser(error);
            }
        }

        function stopRecording() {
            event.preventDefault();
            logInBrowser(`stopRecording : Stopped timer at ${new Date()}`);

            if (isRecording) {
                mediaRecorder.stop();
                clearInterval(intervalId);
                startRecordingButton.hidden = true;
                stopRecordingButton.hidden = true;
                isRecording = false;
            }
        }

        async function startTimer() {
            logInBrowser(`startTimer : Started timer at ${new Date()}`);
            intervalId = setInterval(async () => {
                seconds++;
                logInBrowser(`Time: ${formatTime(seconds)}`);

                if (seconds >= RECORDING_LIMIT) {
                    clearInterval(intervalId);
                    mediaRecorder.stop();
                    logInBrowser("Time's up!");
                }
            }, 1000);
        }

        async function checkUsernameExists(username) {
            try {
                const response = await fetch(`http://localhost:3000/users/${username}`);
                if (response.ok) {
                    const responseData = await response.json();
                    return responseData;
                } else if (response.status === 404) {
                    return null;
                } else {
                    throw new Error(`Failed to check username existence. Status: ${response.status}`);
                }
            } catch (error) {
                console.error('Error checking username existence:', error);
                return null;
            }
        }

        async function proceedWithAuthentication() {
            event.preventDefault();

            const username = usernameInput.value;

            const audioBlob = new Blob(audioChunks, { type: "audio/ogg" });
            const formData = new FormData();

            formData.append("username", username);
            formData.append("audio", audioBlob);

            try {
                const response = await fetch("http://localhost:3000/login", {
                    method: "POST",
                    body: formData,
                });
                console.log("login");

                if (response.ok) {
                    // TODO: Tratar o login bem-sucedido, redirecionamento, etc.
                    console.log("Login bem-sucedido");
                } else {
                    // TODO: Tratar a falha no login
                    console.error("Falha no login");
                }
            } catch (error) {
                console.error("Erro durante o login:", error);
            }
        }

        loginButton.addEventListener("submit", async function (event) {
            event.preventDefault();

            const username = usernameInput.value;

            const audioBlob = new Blob(audioChunks, { type: "audio/wav" });
            const formData = new FormData();

            formData.append("username", username);
            formData.append("audio", audioBlob);

            try {
                const response = await fetch("http://localhost:3000/login", {
                    method: "POST",
                    body: formData,
                });

                if (response.ok) {
                    // TODO: Tratar o login bem-sucedido, redirecionamento, etc.
                    console.log("Login bem-sucedido");
                } else {
                    // TODO: Tratar a falha no login
                    console.error("Falha no login");
                }
            } catch (error) {
                console.error("Erro durante o login:", error);
            }
        });

        function resetRecording() {
            seconds = 0;
            audioChunks = [];
        }

        function toggleLogs() {
            if (checkboxLogs.checked) {
                logs.hidden = false;
            } else {
                logs.hidden = true;
            }

        }

        function formatTime(seconds) {
            if (seconds > 4) {
                stopRecordingButton.hidden = false;
            }
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60)
                .toString()
                .padStart(2, "0");
            const remainingSeconds = (seconds % 60).toString().padStart(2, "0");

            const formattedTime = `${hours}:${minutes}:${remainingSeconds}`;
            timestamp.innerText = "Time: " + formattedTime;
            return formattedTime;
        }

        function logInBrowser(message) {
            logContent += `- ${new Date()}: ${message}` + '\r\n' + '\r\n';
            logs.value = logContent;
            logs.scrollTop = logs.scrollHeight;
        }
    </script>
</body>

</html>